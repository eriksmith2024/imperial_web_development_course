import { createSlice } from '@reduxjs/toolkit'; // Imports the createSlice function from Redux


const initialState = { // initial state for cart slice of Redux store.
  items: [], // An array to store the items added to the cart. Each item will be an object.
};

// Creates a Redux slice named 'cart' to manage cart-related state.
export const cartSlice = createSlice({
  name: 'cart', // The name of this slice in the Redux store.
  initialState, // Uses the defined initial state for this slice.
  reducers: {
    addItem: (state, action) => {     // Defines a reducer function named 'addItem' to handle adding items to the cart.
      const newItem = action.payload; // The item to be added to the cart, received from the dispatched action.
      const existingItemIndex = state.items.findIndex(       // Finds the index of an existing item in the cart with the same title & color.
        (item) => item.title === newItem.title && item.color === newItem.color
      );

      // Checks if an item with the same title and color already exists in the cart.
      if (existingItemIndex >= 0) {
        state.items[existingItemIndex] = { // If the item exists, update the quantity.
          ...state.items[existingItemIndex],
          quantity: (state.items[existingItemIndex].quantity || 0) + 1, // Increment the quantity of the existing item.
        };
      } else {
        // If the item doesn't exist, add it to the cart with a quantity of 1.
        state.items.push({ ...newItem, quantity: 1 });
      }
    },
    // Defines a reducer function named 'removeItem' to handle removing items from the cart.
    removeItem: (state, action) => {
      const itemToRemove = action.payload; // The item to be removed from the cart, received from the dispatched action.
      // Filters the cart items, 
      state.items = state.items.filter(
        //keeping only the items that do not match the title and color of the item to remove.
        (item) => !(item.title === itemToRemove.title && item.color === itemToRemove.color)
      );
    },
    // Defines a reducer function named 'clearCart' to empty the cart.
    clearCart: (state) => {
      state.items = []; // Sets the 'items' array to an empty array, effectively clearing the cart.
    },
  },
});

// Exports the action creators generated by createSlice (addItem, removeItem, clearCart).
export const { addItem, removeItem, clearCart } = cartSlice.actions;
// Exports the reducer function generated by createSlice, which will handle updates to the 'cart' slice of the store.
export default cartSlice.reducer;
